import sys

class Node:

    total_nodes = 0
    by_id = {}

    def __init__(self):
        self.is_output = False
        self.output = None
        self.children = [None] * 10
        self.node_id = Node.total_nodes
        Node.by_id[self.node_id] = self
        Node.total_nodes += 1

    def serialize(self):
        if self.is_output:
            return "LEAF_NODE('{0}')".format(chr(self.output))
        else:
            return "INNER_NODE({0})".format(
                    ','.join(map(str,
                            map(lambda node: node.node_id if (node is not None) else 0,
                                self.children))))

    def at(self, index):
        assert( self.is_output == False )
        ptr = self.children[index]
        if ptr is None:
            ptr = Node()
            self.children[index] = ptr
        return ptr

    def set_output(self, value):
        assert (self.is_output == False )
        for i in range(10):
            assert(self.children[i] is None)
        self.is_output = True
        self.output = value

def add_range(d, f, t):
    for i in range(f, t+1):
        d[i] = True

def add_to_trie(root, value):
    seq = str(value)[::-1]
    for c in seq:
        index = int(c)
        root = root.at(index)
    root.set_output(value)


valid = {}
add_range(valid, 65, 90)
add_range(valid, 97, 122)
add_range(valid, 32, 33)
valid[44] = valid[46] = valid[58] = valid[59] = valid[63] = True

root = Node()

for k in valid.keys():
    add_to_trie(root, k)

print "// autogenerated by {0}".format(sys.argv[0])
print "struct Node {"
print "   bool isOutput;"
print "   union {"
print "      char value;"
print "      int next[10];"
print "   };"
print "};"
print "#define INNER_NODE(ARGS...) {false, .next = {ARGS}}"
print "#define LEAF_NODE(VALUE) {true, .value = VALUE }"
print "static Node decoder_trie[{0}] = {{".format(Node.total_nodes)

for i in range(Node.total_nodes):
    node = Node.by_id[i]
    print "   /* node[{1:2d}]: */ {0},".format(node.serialize(), i)


print "};"
print "// end of autogenerated"
